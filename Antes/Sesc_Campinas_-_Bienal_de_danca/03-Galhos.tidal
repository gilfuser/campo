do
-- panic
--resetCycles
let agogo =
        s "< [agogo*2 ~] [agogo ~ agogo] [~ agogo ~] >*2"
        |+| n ((irand 4)*"<-3 7 3 5 -4>/4")
        # gain 0.85
let agogo1 =
        speed ( range 0.25 1 sine + slow 4 ( range 0 "<0.25 2>" saw ))
        # n ( scale "{majPent minPent}%16" (segment "1%16" $ irand 6 ) ) 
        # tremolorate (slow 4 $ rev "1 8 4 2.5") # tremolodepth 1
        # gain 0.9
        # pan ((543 ~>) $ perlin2 (sine))
let agogo2 =
        (|+| n "<0 2 4 6 7 >") $
        slow "<32 64>" $
        (
            -- (# speed ( range 0.75 1 sine + slow 4 ( range 0 "<0.125 0.25>" saw ))).
            (|+ n (fast 32 $ scale "{majPent minPent}%16" (segment "1%16" $ irand 6 )) )
            -- .(off 0.125 (
            --     -- (|+ note "<3 5>*16")
            --     (|+ note (scale "<majPent minPent>" "<3 5>*16"))
            --     -- .(+ gain (range 0.85 1 rand))
            --     .(# pan ((345 ~>) $ perlin2 (sine*4)))
            --     .(# nudge (range 0 0.01 rand))
            -- ))
            .
            (# tremolorate (slow 4 $ rev "1 8 4 2.5")).(# tremolodepth 1)
            .(# pan (perlin2 (sine*4)))
        ) $
        s $ step' [ "agogo:4", "agogo:1", "agogo:2", "agogo:3" ]
        (take 512 $ lindenmayer 7 "0:1 1 1,1:0~~~0~~~0~0~~~0~,2:2~2~,~:~~3 2~" "0")
p 1 $ trigger $
        -- iter 2 $
        stack [
            -- s "agogo*<4 6 8 12 16>*1.25"
            -- # agogo1
            -- # gain 0.8
            -- ,
            -- ("<0 1 2 3 4 3 2 1 0 >/4" <~) $
            -- zoom (0, 0.25) $
            -- s "agogo*<4>*1.25"
            -- # agogo1
            -- # note "-12"
            -- # legato 1
            -- ,
            agogo2
            # gain 0.8
        ]
        # orbit 1
        -- # gain 1.2

-- p 7 $ "[[~ stk, ~ snc, ~ realclaps]*4, pec-df*2, bd*4]" # n (rand * 12)

hush

do
let baixo =
        -- every 8 ( chunk 4 ("<0.125 0.25>/2" <~) . chunk 3 ( |+| n "[0, 7]" ). chunk 2 (_off (1/4) (|- 3)) ) $
        -- whenmod 4 2 (superimpose (slowstripe 2)) $
        s "[~ pluck]*4"
        # n (scale "<majPent minPent>/16" (iter 3 "[0 4 7 9]/4") )
        # sustain (smooth $ range 0.5 1 rand)
        # release (range 0.2 0.5 rand)
        -- # sind 2
        # gain 0.9
        # orbit 3
p 3 $  trigger $ baixo
    -- # pan "[0, 0.25, 0.5, 0.75]"

do
let palmas =
        s " [[~realclaps~], [~! realclaps~ ~/2], [[~!]/2 realclaps ~/3], [realclaps/2]]/4"
        # n (irand 4) 
        # orbit 2
let lata =
        mask (every 3 inv "<[tftftttf] [tfttftff]>" ) $
        s "[ can]*8"
        |+| n ((irand 4)*"<-3 7 3 5 -4>/4.5")
        # orbit 1
let relogio =
        someCyclesBy 0.2 (degradeBy 0.1. fast "[ 1 [8 2! 16?] ]") $
        s "rs*4"
        # orbit 1
let chocalho =
        s "[ma8(6,16)]*<1!3 [1 2]>"
        # gain 0.78
        # orbit 2
p 4 $
    degradeBy 0.05 $
    stack [
        -- palmas # gain 0.85,
        lata,
        relogio
        # gain 0.8
        ,
        chocalho
    ]
    -- # pan "[0, 0.25, 0.5, 0.75]"

do
let bdhh =
        fix (# gain 0.78) (s "bd") $
        every 8 (ghost) $
        "[bd(3,8), [~ hh*<1 2>]*4]"
let led =
        stack [
                -- someCyclesBy 0.12 (scramble 8) $
                -- someCyclesBy 0.07 (striate 16 ) $
                sometimesBy 0.08 (fast 2) $
                (# legato 0.5) $
                chop "[8 16 8 8]" $
                "led2a/2"
                -- # legato 1 -- "< 0.5>"
        ]
p 5 $ stack [
        bdhh # orbit 1
        ,
        -- "sne snc sne snc" # gain 1.2  # n (irand 4)
        -- # legato "1 0.33!3"
        -- ,
        led
        # gain 0.8
        -- # gain 1.2
        # orbit 2
    ]
    -- # pan 0.0625

xfadeIn 6 4 $ "dummy*8"
